---
- name: "[SSL] Set Master Node SSL Member"
  ansible.builtin.set_fact:
    ssl_master_node_member: "{{ hostvars[groups[ansible_master_group][0]] }}"

- name: "[SSL] Check if CA File exists"
  ansible.builtin.stat:
    path: "{{ ssl_path }}/{{ ssl_root_ca_key_name }}"
  register: ca_file
  when: ssl_master_node_member.inventory_hostname == inventory_hostname

- name: "[SSL] Check if Admin Key File exists"
  ansible.builtin.stat:
    path: "{{ ssl_path }}/{{ ssl_admin_key_name }}"
  register: admin_file
  when: ssl_master_node_member.inventory_hostname == inventory_hostname

- name: "[SSL] Generate CA Key and Certificate"
  ansible.builtin.shell: |
    openssl genrsa -out {{ ssl_root_ca_key_name }} {{ ssl_root_ca_size }}
    openssl req -new -x509 -sha256 -key {{ ssl_root_ca_key_name }} -subj "{{ ssl_subject | replace('%REPLACE_CN%', ssl_root_cn) }}" -out {{ ssl_root_ca_cert_name }} -days {{ ssl_root_ca_days }}
    chown {{ opensearch_user }}:{{ opensearch_group }} {{ ssl_root_ca_key_name }} {{ ssl_root_ca_cert_name }}
    chmod 600 {{ ssl_root_ca_key_name }} {{ ssl_root_ca_cert_name }}
  args:
    chdir: "{{ ssl_path }}"
  when: 
    - not hostvars[groups[ansible_master_group][0]].ca_file.stat.exists
    - ssl_master_node_member.inventory_hostname == inventory_hostname

- name: "[SSL] Generate Admin Key if not exists"
  ansible.builtin.shell: |
    openssl genrsa -out {{ ssl_admin_key_name }}-tmp {{ ssl_root_ca_size }}
    openssl pkcs8 -inform PEM -outform PEM -in {{ ssl_admin_key_name }}-tmp -topk8 -nocrypt -v1 PBE-SHA1-3DES -out {{ ssl_admin_key_name }}
    openssl req -new -key {{ ssl_admin_key_name }} -subj "{{ ssl_subject | replace('%REPLACE_CN%', ssl_admin_cn) }}" -out {{ ssl_admin_key_name }}.csr
    openssl x509 -req -in {{ ssl_admin_key_name }}.csr -CA {{ ssl_root_ca_cert_name }} -CAkey {{ ssl_root_ca_key_name }} -CAcreateserial -sha256 -out {{ ssl_admin_cert_name }} -days {{ ssl_admin_days }}
    rm -f {{ ssl_admin_key_name }}.csr {{ ssl_admin_key_name }}-tmp
    chown {{ opensearch_user }}:{{ opensearch_group }} {{ ssl_admin_key_name }} {{ ssl_admin_cert_name }}
    chmod 600 {{ ssl_admin_key_name }} {{ ssl_admin_cert_name }}
  args:
    chdir: "{{ ssl_path }}"
  when: 
    - not hostvars[groups[ansible_master_group][0]].admin_file.stat.exists
    - ssl_master_node_member.inventory_hostname == inventory_hostname

- name: Generate Master Nodes Certificates
  ansible.builtin.include_tasks: nodes_certificates.yml
  loop: "{{ groups[ansible_master_group] | map('extract', hostvars, 'inventory_hostname') }}"
  when:
    - ssl_nodes_individual_certs

- name: Generate Data Nodes Certificates
  ansible.builtin.include_tasks: nodes_certificates.yml
  loop: "{{ groups[ansible_data_group] | map('extract', hostvars, 'inventory_hostname') }}"
  when:
    - ssl_nodes_individual_certs

- name: Generate Clients Certificates
  ansible.builtin.include_tasks: client_certificates.yml
  loop: "{{ ssl_clients }}"

- name: "[SSL] List all certificates"
  ansible.builtin.find:
    paths: "{{ ssl_path }}"
  register: files_to_copy

- name: "[SSL] Download certificates and keys from {{ ssl_master_node_member.inventory_hostname }}"
  ansible.builtin.fetch:
    src: "{{ item }}"
    dest: "/tmp/ansible-opensearch-{{ cluster_name }}/"
    flat: yes
  changed_when: false
  loop: "{{ files_to_copy.files | map(attribute='path') }}" 
  when: 
    - ssl_master_node_member.inventory_hostname == inventory_hostname

- name: "[SSL] Copy ALL Certificates to all {{ ansible_master_group }} members"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ssl_path }}/"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: "0600"
  with_fileglob: "/tmp/ansible-opensearch-{{ cluster_name }}/*.pem"
  when: 
    - ssl_master_node_member.inventory_hostname != inventory_hostname
    - ansible_master_group in group_names

- name: "[SSL] Copy Node Certificates to {{ ansible_data_group }} members"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ssl_path }}/"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: "0600"
  with_fileglob: "/tmp/ansible-opensearch-{{ cluster_name }}/{{ inventory_hostname }}*.pem"
  when: 
    - ssl_nodes_individual_certs
    - ssl_master_node_member.inventory_hostname != inventory_hostname
    - ansible_data_group in group_names

- name: "[SSL] Copy CA Certificates to {{ ansible_data_group }} members"
  ansible.builtin.copy:
    src: "/tmp/ansible-opensearch-{{ cluster_name }}/{{ ssl_root_ca_cert_name }}"
    dest: "{{ ssl_path }}/"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: "0600"
  when: 
    - ssl_master_node_member.inventory_hostname != inventory_hostname
    - ansible_data_group in group_names

- name: "[SSL] Remove temporary folder"
  ansible.builtin.file:
    path: "/tmp/ansible-opensearch-{{ cluster_name }}/"
    state: absent
  changed_when: false
  delegate_to: localhost
  become: no
  run_once: yes